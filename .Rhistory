snps
columns(snps)
rsid2loc("rs184842890")
?snpcount
snpsById(snps, ids = c("rs184842890"))
gwas_gr <- readRDS("K:/Shared drives/Brain_Merged/Analysis/GWAS/GWAS_Parkinsons_23andme_2018_snps.with.ld.buddies_GRange-hg38.rds")
gwas_gr
snp_ovl <- snpsByOverlaps(snps, gwas_gr, drop.rs.prefix = FALSE)
seqlevelsStyle(gwas_gr) <- "NCBI"
snp_ovl <- snpsByOverlaps(snps, gwas_gr, drop.rs.prefix = FALSE)
snp_ovl
length(gwas_gr)
library(SNPlocs.Hsapiens.dbSNP151.GRCh37)
library(SNPlocs.Hsapiens.dbSNP144.GRCh37)
gwas_hg19 <- read.table(file = "K:/Shared drives/Brain_Merged/Analysis/GWAS/GWAS_Parkinsons_23andme_2018_snps.with.ld.buddies.txt", sep = "\t", header = TRUE)
gwas_hg19
hg19$lead_locus <- hg19$lead_locus + 1 #change to 1-indexed locus for R
gwas_hg19$lead_locus <- hg19$lead_locus + 1 #change to 1-indexed locus for R
gwas_hg19$lead_locus <- gwas_hg19$lead_locus + 1 #change to 1-indexed locus for R
hg19_gr <- makeGRangesFromDataFrame(gwas_hg19,
keep.extra.columns=TRUE,
ignore.strand=TRUE,
seqinfo=NULL,
seqnames.field="chr",
start.field="pos",
end.field="pos",
starts.in.df.are.0based=FALSE)
hg19_gr
snps <- SNPlocs.Hsapiens.dbSNP144.GRCh37
snp_ovl <- snpsByOverlaps(snps, hg19_gr, drop.rs.prefix = FALSE)
snp_ovl
as.data.frame(snp_ovl)
getwd()
write.table(x = as.data.frame(snp.ovl), file = "gwas-23andme.txt", sep = "\t", col.names = NA, quote = FALSE)
write.table(x = as.data.frame(snp_ovl), file = "gwas-23andme.txt", sep = "\t", col.names = NA, quote = FALSE)
df <- as.data.frame(snp_ovl)
which(df$pos == "44182845")
which(df$pos == "43666848")
which(df$pos == "40734202")
library(haploR)
rsid_file <- "K:/Shared drives/Brain_Merged/Analysis/GWAS/haploreg/190802_Nalls_PD-23andMe_GWAS_LeadSNPs.txt"
temp <- queryHaploreg(file = rsid_file, ldThresh = 0.8, ldPop = "EUR")
temp
as.data.frame(temp)
gwas_df <- as.data.frame(temp)
sum(gwas_df$is_query_snp)
colnames(gwas_df)
head(gwas_df$GENCODE_name)
head(gwas_df$eQTL)
colnames(gwas_df)
keep_columns <- c("chr","pos_hg38","r2","D'","is_query_snp","rsID","ref","alt","AFR","AMR","ASN","EUR","GERP_cons",
"SiPhy_cons","GENCODE_id","GENCODE_name","GENCODE_direction","GENCODE_distance","RefSeq_id",
"RefSeq_name","RefSeq_direction","RefSeq_distance","query_snp_rsid")
gwas_df <- gwas_df[,keep_columns]
gwas_df
tf_gr <- readRDS("K:/Shared drives/Brain_Merged/Analysis/GTEx/190829_TF_PromoterRegions.rds")
tf_gr
ArchRx::countInsertions
?edgeR::cpm
se <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/Cluster_Analyses/clusterFrags/ClusterGroups/190830_CellTypes_TF-Promoters_ArchRSE.rds")
se
norm_counts <- as.data.frame(assays(se)$log2norm)
head(norm_counts)
write.table(x = norm_counts, file = "190830_TF-Promoters_NormAccessibility.txt", col.names = NA, quote = FALSE, sep = "\t")
getwd()
library(GenomicRanges)
library(ArchRx)
snp_df <- read.table(file = snp_file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_file <- "K:/Shared drives/Brain_Merged/Analysis/GWAS/ld_buddies_table_stage2.tsv"
snp_df <- read.table(file = snp_file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
head(snp_df)
snp_gr <- makeGRangesFromDataFrame(df = snp_df,
keep.extra.columns = TRUE,
ignore.strand = TRUE,
seqnames.field = "chr",
start.field = "pos",
end.field = "pos",
starts.in.df.are.0based = FALSE)
unique(snp_df$source_gwas)
snp_df <- read.table(file = snp_file, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
snp_df$disease <- NA
snp_df$disease[which(snp_df$source_gwas == "23andme_PD_hg38.with.ld.buddies.txt")] <- "PD"
snp_df$disease[which(snp_df$source_gwas == "Chang_23andMe_Parkinsons_LeadSNPs.with.ld.buddies.txt")] <- "PD"
snp_df$disease[which(snp_df$source_gwas == "Nalls_23andMe_LeadSNPs.with.ld.buddies.txt")] <- "PD"
snp_df$disease[which(snp_df$source_gwas == "Parkinsons_Pankratz_2012.with.ld.buddies.txt")] <- "PD"
snp_df$disease[which(snp_df$source_gwas == "Alzheimers_Kunkle_2019.with.ld.buddies.txt")] <- "AD"
snp_df$disease[which(snp_df$source_gwas == "Alzheimers_Jansen_2018.with.ld.buddies.txt")] <- "AD"
snp_df$disease[which(snp_df$source_gwas == "Alzheimers_Lambert_2013.with.ld.buddies.txt")] <- "AD"
which(is.na(snp_df$disease))
num_AD <- length(which(snp_df$disease == "AD"))
num_PD <- length(which(snp_df$disease == "PD"))
num_AD
num_PD
which(duplicated(paste0(snp_df$source_gwas,"_",snp_df$snp_id)))
which(duplicated(paste0(snp_df$disease,"_",snp_df$snp_id)))
snp_df_dedupDisease <- snp_df[which(duplicated(paste0(snp_df$disease,"_",snp_df$snp_id))),]
num_AD <- length(which(snp_df_dedupDisease$disease == "AD"))
num_PD <- length(which(snp_df_dedupDisease$disease == "PD"))
num_AD
num_PD
head(snp_df$snp_id)
snp_df_dedupDisease <- snp_df[which(duplicated(paste0(snp_df$disease,"_",snp_df$rsid))),]
length(which(snp_df_dedupDisease$disease == "AD"))
length(which(snp_df_dedupDisease$disease == "PD"))
num_AD <- length(which(snp_df_dedupDisease$disease == "AD"))
num_PD <- length(which(snp_df_dedupDisease$disease == "PD"))
which(snp_df_dedupDisease[which(snp_df_dedupDisease == "AD"),"snp_id"] %in% snp_df_dedupDisease[which(snp_df_dedupDisease == "PD"),"snp_id"])
overlap <- which(snp_df_dedupDisease[which(snp_df_dedupDisease == "AD"),"snp_id"] %in% snp_df_dedupDisease[which(snp_df_dedupDisease == "PD"),"snp_id"])
snp_df_dedupDisease <- snp_df[which(duplicated(paste0(snp_df$disease,"_",snp_df$rsid))),]
num_AD <- length(which(snp_df_dedupDisease$disease == "AD"))
num_PD <- length(which(snp_df_dedupDisease$disease == "PD"))
num_AD <- length(which(snp_df_dedupDisease$disease == "AD"))
num_PD <- length(which(snp_df_dedupDisease$disease == "PD"))
overlap <- length(which(snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "AD"),"snp_id"] %in% snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "PD"),"snp_id"]))
overlap
snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "AD"),"snp_id"]
snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "PD"),"snp_id"]
overlap <- length(which(snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "AD"),"snp_id"] %in% snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "PD"),"snp_id"]))
overlap
duplicated(paste0(snp_df$disease,"_",snp_df$rsid))
snp_df_dedupDisease <- snp_df[which(!duplicated(paste0(snp_df$disease,"_",snp_df$rsid))),]
num_AD <- length(which(snp_df_dedupDisease$disease == "AD"))
num_PD <- length(which(snp_df_dedupDisease$disease == "PD"))
num_AD
num_PD
overlap <- length(which(snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "AD"),"snp_id"] %in% snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "PD"),"snp_id"]))
overlap
snp_df_dedupDisease
length(which(snp_df[which(snp_df$disease == "AD"),"snp_id"] %in% snp_df[which(snp_df$disease == "PD"),"snp_id"]))
ad_snp_gr <- makeGRangesFromDataFrame(df = snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "AD"),],
keep.extra.columns = TRUE,
ignore.strand = TRUE,
seqnames.field = "chr",
start.field = "pos",
end.field = "pos",
starts.in.df.are.0based = FALSE)
pd_snp_gr <- makeGRangesFromDataFrame(df = snp_df_dedupDisease[which(snp_df_dedupDisease$disease == "PD"),],
keep.extra.columns = TRUE,
ignore.strand = TRUE,
seqnames.field = "chr",
start.field = "pos",
end.field = "pos",
starts.in.df.are.0based = FALSE)
bulk_gr <- readRDS("K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/PeakCalls/190716_Kundaje_IDR-Peaks_ControlsOnly_30percent.rds")
sc_gr <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/peakCalls/190812_Kundaje_scATAC_IDR_MergedPeakSet.rds")
?overlapsAny
overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")
seqlevelsStyle(x = ad_snp_gr) <- "UCSC"
ad_snp_gr
seqlevelsStyle(x = pd_snp_gr) <- "UCSC"
which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any"))
ad_overlaps <- intersect(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any")))
ad_overlaps
pd_overlaps <- intersect(which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = pd_snp_gr, subject = sc_gr, type = "any")))
pd_overlaps
which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any"))
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any"))
union(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any")))
union(which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = pd_snp_gr, subject = sc_gr, type = "any")))
ad_overlaps <- union(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any")))
pd_overlaps <- union(which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = pd_snp_gr, subject = sc_gr, type = "any")))
length(ad_overlaps)
which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any"))
which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any"))
length(which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any")))
length(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")))
length(ad_overlaps)
ad_overlaps <- union(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any")))
pd_overlaps <- union(which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = pd_snp_gr, subject = sc_gr, type = "any")))
length(pd_overlaps)
ad_snp_gr[union(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any")))]
ad_overlap_gr <- ad_snp_gr[union(which(overlapsAny(query = ad_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = ad_snp_gr, subject = sc_gr, type = "any")))]
pd_overlap_gr <- pd_snp_gr[union(which(overlapsAny(query = pd_snp_gr, subject = bulk_gr, type = "any")),
which(overlapsAny(query = pd_snp_gr, subject = sc_gr, type = "any")))]
pd_overlap_gr
pd_overlap_gr["11530"]
bed_files <- list.files(path = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/peakCalls/", pattern="narrowPeak")
bed_files
bed_files <- list.files(path = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/peakCalls/", pattern="narrowPeak", full.names = TRUE)
bed_files
library(rtracklayer)
for(i in bed_files) {
gr <- import.bed(con = i)
export.bed(object = gr, con = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
bed_files <- list.files(path = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/peakCalls/Cluster-based/", pattern = "narrowPeak", full.names = TRUE)
bed_files
for(i in bed_files) {
gr <- import.bed(con = i)
export.bed(object = gr, con = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
library(rtracklayer)
for(i in bed_files) {
gr <- import.bed(con = i)
export.bed(object = gr, con = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
bed_files
for(i in bed_files) {
gr <- import.bed(con = i)
export.bed(object = gr, con = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
?import.bed
for(i in bed_files) {
gr <- import.bed(con = i, format = "narrowPeak")
export.bed(object = gr, con = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
for(i in bed_files) {
gr <- import(con = i, format = "narrowPeak")
export.bed(object = gr, con = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
for(i in bed_files) {
gr <- import(con = i, format = "narrowPeak")
saveRDS(object = gr, file = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
bed_files <- list.files(path = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/peakCalls/CellType-based/", pattern = "narrowPeak", full.names = TRUE)
for(i in bed_files) {
gr <- import(con = i, format = "bed")
saveRDS(object = gr, file = gsub(pattern = "narrowPeak", replacement = "rds", x = i))
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DEGreport")
library(DEGreport)
data(humanGender)
library(DESeq2)
idx <- c(1:10, 75:85)
dse <- DESeqDataSetFromMatrix(assays(humanGender)[[1]][1:1000, idx],
colData(humanGender)[idx,], design=~group)
res <- degCovariates(log2(counts(dse)+0.5), colData(dse))
res <- degCovariates(log2(counts(dse)+0.5),
colData(dse), legacy = TRUE)
res$plot
res$scatterPlot[[1]]
res
res <- degCovariates(log2(counts(dse)+0.5), colData(dse), minPC = 0)
res
res <- degCovariates(log2(counts(dse)+0.5), colData(dse), minPC = 10)
res
degCovariates
se <- readRDS("K:/Shared drives/Brain_Merged/Analysis/ArchR_KundajeCounts/190716_ArchRSE_ControlsOnly_Kundaje_30percent_Counts_NormCounts.rds")
res <- degCovariates(counts = assays(se)$log2norm, metadata = colData(se), minPC = 5)
str(res)
res
degCovariates
counts <- assays(se)$log2norm
metadata <- colData(se)
minPC <- 5
fdr = 0.1
scale = FALSE
correlation = "kendall"
addCovDen = TRUE
legacy = FALSE
smart = TRUE
method = "lm"
plot = TRUE
title <- paste(ifelse(scale, "s", "un-s"), "caled ", " data in pca;\npve >= ",
minPC, "%;\n", correlation, " cor ", sep = "")
title
message(paste("\nrunning pca and calculating correlations for:\n",
title, sep = ""))
metadata <- as.data.frame(metadata)
metadata
metadata <- degClean(metadata)
metadata <- DEGreport:::degClean(metadata)
metadata
covar_class <- sapply(metadata[1, ], class)
covar_class
metadata <- metadata %>% mutate_all(as.numeric) %>% as.data.frame() %>%
set_rownames(row.names(metadata))
metadata <- metadata %>% DEGreport:::mutate_all(as.numeric) %>% as.data.frame() %>%
set_rownames(row.names(metadata))
DEGreport:::mutate_all
mutate_all
library(dplyr)
metadata <- metadata %>% mutate_all(as.numeric) %>% as.data.frame() %>%
set_rownames(row.names(metadata))
stopifnot(identical(colnames(counts), rownames(metadata)))
pcares <- .runpca(genesbysamples = counts, scale_data_for_pca = scale,
min_pve_pct_pc = minPC)
DEGreport::runpca
.runpca <- function(genesbysamples, scale_data_for_pca = TRUE,
min_pve_pct_pc = 1.0) {
# estimate variance in data by pc:
pca.res <- prcomp(t(genesbysamples), center = TRUE,
scale. = scale_data_for_pca, retx = TRUE)
# examine how much variance is explained by pcs,
# and consider those with pve >= (min_pve_pct_pc %):
pc.var <- pca.res$sdev^2L
pve <- 100L * (pc.var / sum(pc.var))
npca <- max(1L, length(which(pve >= min_pve_pct_pc)))
samplepcvals <- pca.res$x[, 1L:npca, drop = FALSE]
list(samplepcvals = samplepcvals, pve = pve)
}
pcares <- .runpca(genesbysamples = counts, scale_data_for_pca = scale,
min_pve_pct_pc = minPC)
pcares
samplepcvals <- pcares[["samplepcvals"]]
samplepcvals
pve <- pcares[["pve"]]
original_names <- colnames(samplepcvals)
original_names
pc_pct <- data.frame(pc = colnames(samplepcvals), pct = paste(" (",
sprintf("%.2f", pve[1L:ncol(samplepcvals)]), "%)", sep = ""),
stringsAsFactors = FALSE)
pc_pct
samplesbyfullcovariates <- metadata[, which(apply(metadata,
2L, function(dat) all(!is.na(dat)))), drop = FALSE]
samplesbyfullcovariates
covar_class <- covar_class[colnames(samplesbyfullcovariates)]
covar_class
exclude_vars_from_fdr <- setdiff(colnames(metadata), colnames(samplesbyfullcovariates))
exclude_vars_from_fdr
covar_factors <- samplesbyfullcovariates[, names(covar_class)[covar_class !=
"numeric"], drop = FALSE]
covar_factors
covar_numeric <- samplesbyfullcovariates[, names(covar_class)[covar_class ==
"numeric"]]
covar_numeric
samplesbyfullcovariates = cbind(covar_factors, covar_numeric)
samplesbyfullcovariates
.calccompletecorandplot <- function(compare_data, covar_data,
correlationtype, title,
weights = NULL,
exclude_vars_from_fdr=NULL,
max_fdr = 0.1) {
# get factor and continuous covariates
character_vars <- lapply(covar_data, class) == "character"
if (sum(character_vars) > 0 )
covar_data[, character_vars] <- apply(covar_data[, character_vars,
drop = FALSE],
1L, as.factor)
factorcovariates <- select_if(covar_data, is.factor) %>% colnames
contcovariates <- select_if(covar_data, is.numeric) %>% colnames
all_covariates <- cbind(covar_data[, contcovariates, drop = FALSE],
covar_data[, factorcovariates, drop = FALSE] %>%
mutate_all(as.numeric))
cov_cor <- corr.test(compare_data,
all_covariates,
use = 'pairwise.complete.obs',
method = correlationtype,
adjust = "none")
all_cor_vals <- cov_cor[["r"]]
all_cor_p <- cov_cor[["p"]]
rownames(all_cor_vals) <- colnames(compare_data)
colnames(all_cor_vals) <- colnames(all_covariates)
rownames(all_cor_p) <- colnames(compare_data)
colnames(all_cor_p) <- colnames(all_covariates)
effects.significantcovars <- all_cor_vals
effects.significantcovars[all_cor_p > max_fdr] <- 0
effects.significantcovars <- colSums(abs(effects.significantcovars) * replicate(dim(effects.significantcovars)[2L], weights / sum(weights)))
effects.significantcovars <- effects.significantcovars[order(abs(effects.significantcovars), decreasing = TRUE)]
cor_mat <- melt(all_cor_p, varnames = c("compare", "covar"))
colnames(cor_mat)[colnames(cor_mat) == "value"] <- "pvalue"
cor_mat[["compare"]] <- factor(cor_mat[["compare"]],
levels = rownames(all_cor_p))
cor_mat[["covar"]] <- factor(cor_mat[["covar"]],
levels = colnames(all_cor_p))
cor_mat[["r"]] <- melt(all_cor_vals)[["value"]]
cor_mat[["fdr"]] <- p.adjust(cor_mat[["pvalue"]], method = "fdr")
return(list(mat = cor_mat,
effects.significantcovars = effects.significantcovars))
}
corrRes <- .calccompletecorandplot(samplepcvals, samplesbyfullcovariates,
correlation, title, weights = pve[1L:dim(samplepcvals)[2L]],
exclude_vars_from_fdr)
DEGreport::corr.test
install.packages("psych")
install.packages("psych")
install.packages("psych")
install.packages("psych")
library(psych)
GInteractionsToWashU <- function(gi, minDist = NULL, outfile = NULL, url = FALSE) {
#if minimum distance is supplied, threshold the gi object upfront
if(!is.null(minDist)) {
gi <- gi[which(gi$dist >= minDist)]
}
df <- data.frame() #this will hold the data for output
#store the information for the mid-point of each anchor
middleOne <- round((end(ranges(anchorOne(gi))) + start(ranges(anchorOne(gi))))/2 )
middleTwo <- round((end(ranges(anchorTwo(gi))) + start(ranges(anchorTwo(gi))))/2 )
if(url) {
df1 <- data.frame(chr1 = seqnames(anchorOne(gi)),
start1 = middleOne-1,
end1 = middleOne +1,
coord2 = paste0(seqnames(anchorTwo(gi)),":",middleTwo-1,"-",middleTwo+1,",",gi$coaccess),
orderID = seq(from = 1, to = length(gi), by = 1))
df2 <- data.frame(chr1 = seqnames(anchorTwo(gi)),
start1 = middleTwo-1,
end1 = middleTwo +1,
coord2 = paste0(seqnames(anchorOne(gi)),":",middleOne-1,"-",middleOne+1,",",gi$coaccess),
orderID = seq(from = 1, to = length(gi), by = 1))
df_url <- rbind(df1, df2)
df_url <- df_url[order(df_url$start1),]
df_url <- df_url[order(gsub(pattern = "chr", replacement = "", x = df_url$chr1)),]
df_url$orderID <- seq(from = 1, to = nrow(df_url), by = 1)
df_url$direction <- "."
df <- df_url
} else {
df <- as.data.frame(matrix(nrow = length(gi), ncol = 3, NA))
colnames(df) <- c("anchor1", "anchor2", "score")
df$anchor1 <- paste(seqnames(anchorOne(gi)), middleOne-1, middleOne+1, sep = ",")
df$anchor2 <- paste(seqnames(anchorTwo(gi)), middleTwo-1, middleTwo+1, sep = ",")
df$score <- gi$coaccess
}
if(!is.null(outfile)) {
write.table(x = df, file = outfile, quote = FALSE, sep = "\t", col.names = FALSE, row.names = FALSE)
} else {
return(df)
}
}
gi <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions.rds")
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
#see http://wiki.wubrowse.org/Long-range
GInteractionsToWashU <- function(gi, minDist = NULL, outfile = NULL, url = FALSE) {
#if minimum distance is supplied, threshold the gi object upfront
if(!is.null(minDist)) {
gi <- gi[which(gi$dist >= minDist)]
}
df <- data.frame() #this will hold the data for output
#store the information for the mid-point of each anchor
middleOne <- round((end(ranges(anchorOne(gi))) + start(ranges(anchorOne(gi))))/2 )
middleTwo <- round((end(ranges(anchorTwo(gi))) + start(ranges(anchorTwo(gi))))/2 )
if(url) {
df1 <- data.frame(chr1 = seqnames(anchorOne(gi)),
start1 = middleOne-1,
end1 = middleOne +1,
coord2 = paste0(seqnames(anchorTwo(gi)),":",middleTwo-1,"-",middleTwo+1,",",gi$coaccess),
orderID = seq(from = 1, to = length(gi), by = 1))
df2 <- data.frame(chr1 = seqnames(anchorTwo(gi)),
start1 = middleTwo-1,
end1 = middleTwo +1,
coord2 = paste0(seqnames(anchorOne(gi)),":",middleOne-1,"-",middleOne+1,",",gi$coaccess),
orderID = seq(from = 1, to = length(gi), by = 1))
df_url <- as.data.frame(rbind(df1, df2))
df_url <- df_url[order(df_url$start1),]
df_url <- df_url[order(gsub(pattern = "chr", replacement = "", x = df_url$chr1)),]
df_url$orderID <- seq(from = 1, to = nrow(df_url), by = 1)
df_url$direction <- "."
df <- df_url
} else {
df <- as.data.frame(matrix(nrow = length(gi), ncol = 3, NA))
colnames(df) <- c("anchor1", "anchor2", "score")
df$anchor1 <- paste(seqnames(anchorOne(gi)), middleOne-1, middleOne+1, sep = ",")
df$anchor2 <- paste(seqnames(anchorTwo(gi)), middleTwo-1, middleTwo+1, sep = ",")
df$score <- gi$coaccess
}
if(!is.null(outfile)) {
write.table(x = df, file = outfile, quote = FALSE, sep = "\t", col.names = FALSE, row.names = FALSE)
} else {
return(df)
}
}
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
middleOne <- round((end(ranges(anchorOne(gi))) + start(ranges(anchorOne(gi))))/2 )
library(GenomicInteractions)
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.txt", url = TRUE)
GInteractionsToWashU(gi = gi, minDist = 10000, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.bed", url = FALSE)
GInteractionsToWashU(gi = gi, outfile = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/CoAccessibility/Peaks-Co-Accessibility_Significant_KUNDAJE_GenomicInteractions_WashU.bed", url = FALSE)
temp <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.rds")
temp
str(temp)
ArchRx::quantileCut()
quantileCut()
library(ArchRx)
library(SCArchR)
library(ggplot2)
quantileCut()
quantileCut
df <- readRDS("K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.rds")
df
se <- df
se
str(se)
colData(se)
se$colData
df se$colData
df <- se$colData
write.table(x = df, file = "K:/Shared drives/Brain_Merged/Analysis/scATAC/190713/PCs-25-Peaks-25-25-25-Res-2-6-10.colData-metadata.txt", quote = FALSE, sep = "\t", col.names = NA)
library(pkgdown)
setwd("K:/My Drive/Work/GitHub/ArchR/")
build_site()
build_site()
warnings()
build_reference()
warnings()
build_site()
warnings()
build_site()
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
build_articles()
?data.frame
?as.data.frame
?render_page
?GRanges
?ArrowFile
