knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "~/Documents/Heme_Tutorial/")
#Input Libraries
library(ArchR)
#Load Genome Annotations
data("geneAnnoHg19")
data("genomeAnnoHg19")
#Set Threads to be used
threads <- 8
pathFragments <- "Heme_Fragments"
inputFiles <- list.files(pathFragments, pattern = ".gz", full.names = TRUE)
names(inputFiles) <- gsub(".fragments.tsv.gz", "", list.files(pathFragments, pattern = ".gz"))
inputFiles <- inputFiles[!grepl(".tbi", inputFiles)]
inputFiles
#Input Libraries
library(ArchR)
#Load Genome Annotations
data("geneAnnoHg19")
data("genomeAnnoHg19")
#Set Threads to be used
threads <- 8
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "~/Documents/Heme_Tutorial/")
library(ArchR)
#Input Libraries
library(ArchR)
#Load Genome Annotations
data("geneAnnoHg19")
data("genomeAnnoHg19")
#Set Threads to be used
threads <- 8
pathFragments <- "Heme_Fragments"
inputFiles <- list.files(pathFragments, pattern = ".gz", full.names = TRUE)
names(inputFiles) <- gsub(".fragments.tsv.gz", "", list.files(pathFragments, pattern = ".gz"))
inputFiles <- inputFiles[!grepl(".tbi", inputFiles)]
inputFiles
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir = "~/Documents/Heme_Tutorial/")
library(ArchR)
#Load Genome Annotations
data("geneAnnoHg19")
data("genomeAnnoHg19")
#Set Threads to be used
threads <- 8
pathFragments <- "Heme_Fragments"
inputFiles <- list.files(pathFragments, pattern = ".gz", full.names = TRUE)
names(inputFiles) <- gsub(".fragments.tsv.gz", "", list.files(pathFragments, pattern = ".gz"))
inputFiles <- inputFiles[!grepl(".tbi", inputFiles)]
inputFiles
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles[3],
sampleNames = names(inputFiles),
geneAnno = geneAnnoHg19,
genomeAnno = genomeAnnoHg19,
threads = threads,
force = TRUE
)
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles[3],
sampleNames = names(inputFiles)[3],
geneAnno = geneAnnoHg19,
genomeAnno = genomeAnnoHg19,
threads = threads,
force = TRUE
)
ls
```{r eval=TRUE, cache=TRUE}
ArrowFiles <- createArrowFiles(
inputFiles = inputFiles[3],
sampleNames = names(inputFiles)[3],
geneAnno = geneAnnoHg19,
genomeAnno = genomeAnnoHg19,
threads = threads,
addGeneScoreMat = FALSE,
addTileMat = FALSE,
force = TRUE
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
# Small fig.width
knitr::include_graphics("~/Documents/Heme_Tutorial/Heme_Tutorial/Plots/Plot-UMAP-TileLSI_Date-2019-11-22_Time-01-35-25.pdf")
# Small fig.width
knitr::include_graphics("~/Documents/Heme_Tutorial/Heme_Tutorial/Plots/Plot-UMAP-TileLSI_Date-2019-11-22_Time-01-35-25.pdf")
# Small fig.width
knitr::include_graphics("~/Documents/Heme_Tutorial/Heme_Tutorial/Plots/Plot-UMAP-TileLSI_Date-2019-11-22_Time-01-35-25.pdf")
getwd()
"/Users/jeffreygranja/Documents/Heme_Tutorial/Heme_Tutorial/Plots/Plot-UMAP-TileLSI_Date-2019-11-22_Time-01-35-25.pdf
# Small fig.width
knitr::include_graphics("/Users/jeffreygranja/Documents/Heme_Tutorial/Heme_Tutorial/Plots/Plot-UMAP-TileLSI_Date-2019-11-22_Time-01-35-25.pdf")
# Small fig.width
knitr::include_graphics("/Users/jeffreygranja/Documents/Heme_Tutorial/Heme_Tutorial/Plots/Plot-UMAP-TileLSI_Date-2019-11-22_Time-01-35-25.pdf")
"~/Documents/HemeAll/heme/Plots/Plot-Tracks_Date-2019-11-17_Time-17-52-02.pdf"
knitr::include_graphics(path.expand("~/Documents/HemeAll/heme/Plots/Plot-Tracks_Date-2019-11-17_Time-17-52-02.pdf"))
file.copy
list.files()
list.files()
system("cp ~/Documents/HemeAll/heme/Plots/Plot-Tracks_Date-2019-11-17_Time-17-52-02.pdf mychart.pdf")
knitr::include_graphics(path = "mychart.pdf")
"mychart.pdf"
knitr::include_graphics(path = "mychart.pdf")#path.expand("~/Documents/HemeAll/heme/Plots/Plot-Tracks_Date-2019-11-17_Time-17-52-02.pdf"))
knitr::include_graphics(path = "mychart.pdf")
knitr::opts_chunk$set(echo = TRUE)
```{r pressure, echo=FALSE, eval = FALSE}
sessionInfo()
head(sessionInfo())
suppressPackageStartupMessages()
Sys.info()
.Platform
parallel::detectCores()
try(system("grep MemTotal /proc/meminfo", intern = TRUE), silent = TRUE)
ram = substring(system("sysctl hw.memsize", intern = TRUE), 13) #nocov
ram
ram / 10^9
as.numeric(ram) / 10^9
get_windows_ram = function() {
ram = try(system("grep MemTotal /proc/meminfo", intern = TRUE), silent = TRUE)
if (class(ram) != "try-error" && length(ram) != 0) {
ram = strsplit(ram, " ")[[1]]
ram = as.numeric(ram[length(ram) - 1])
ram_size = ram
} else {
# Fallback: This was the old method I used
# It worked for Windows 7 and below.
ram_size = system("wmic MemoryChip get Capacity", intern = TRUE)[-1]
}
return(ram_size)
}
system_ram = function(os) {
if (length(grep("^linux", os))) {
cmd = "awk '/MemTotal/ {print $2}' /proc/meminfo"
ram = system(cmd, intern = TRUE)
} else if (length(grep("^darwin", os))) {
ram = substring(system("sysctl hw.memsize", intern = TRUE), 13) #nocov
} else if (length(grep("^solaris", os))) {
cmd = "prtconf | grep Memory" # nocov
ram = system(cmd, intern = TRUE) ## Memory size: XXX Megabytes # nocov
} else {
ram = get_windows_ram() # nocov
}
ram
}
#' Get the amount of RAM
#'
#' Attempt to extract the amount of RAM on the current machine. This is OS
#' specific:
#' \itemize{
#' \item Linux: \code{proc/meminfo}
#' \item Apple: \code{system_profiler -detailLevel mini}
#' \item Windows: \code{memory.size()}
#' \item Solaris: \code{prtconf}
#' }
#' A value of \code{NA} is return if it isn't possible to determine the amount of RAM.
#' @export
#' @references The \code{print.bytes} function was taken from the \pkg{pryr} package.
#' @examples
#' ## Return (and pretty print) the amount of RAM
#' get_ram()
get_ram = function() {
os = R.version$os
ram = suppressWarnings(try(system_ram(os), silent = TRUE))
if (class(ram) == "try-error" || length(ram) == 0) {
message("\t Unable to detect your RAM. # nocov
Please raise an issue at https://github.com/csgillespie/benchmarkme") # nocov
ram = structure(NA, class = "ram") # nocov
} else {
cleaned_ram = suppressWarnings(try(clean_ram(ram, os), silent = TRUE))
if (class(cleaned_ram) == "try-error" || length(ram) == 0) {
message("\t Unable to detect your RAM. # nocov
Please raise an issue at https://github.com/csgillespie/benchmarkme") # nocov
ram = structure(NA, class = "ram") #nocov
} else {
ram = structure(cleaned_ram, class = "ram")
}
}
return(ram)
}
#' @rawNamespace S3method(print,ram)
print.ram = function(x, digits = 3, unit_system = c("metric", "iec"), ...) {
#unit_system = match.arg(unit_system)
unit_system = "metric"
base = switch(unit_system, metric = 1000, iec = 1024)
power = min(floor(log(abs(x), base)), 8)
if (is.na(x) || power < 1) {
unit = "B"
} else {
unit_labels = switch(
unit_system,
metric = c("kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"),
iec = c("KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB")
)
unit = unit_labels[[power]]
x = x / (base^power)
}
formatted = format(signif(x, digits = digits), big.mark = ",",
scientific = FALSE, ...)
cat(unclass(formatted), " ", unit, "\n", sep = "")
invisible(paste(unclass(formatted), unit))
}
get_ram()
plot(cars)
```{r eval = TRUE}
```{r}
suppressPackageStartupMessages(library(SnapATAC))
suppressPackageStartupMessages(library(SnapATAC))
suppressPackageStartupMessages(library(magrittr))
setwd("/Volumes/JG_SSD_2/Data/Analysis/Tutorial/test-snap")
parallel::detectCores()
Sys.Date()
sessionInfo()
#5k
if(!file.exists("atac_pbmc_5k_nextgem_fragments.tsv.gz")){
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_5k_nextgem/atac_pbmc_5k_nextgem_fragments.tsv.gz")
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_5k_nextgem/atac_pbmc_5k_nextgem_fragments.tsv.gz.tbi")
}
#10k
if(!file.exists("atac_pbmc_10k_nextgem_fragments.tsv.gz")){
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_10k_nextgem/atac_pbmc_10k_nextgem_fragments.tsv.gz")
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_10k_nextgem/atac_pbmc_10k_nextgem_fragments.tsv.gz.tbi")
}
#Analysis of 10x Fragment Files
#Install pip install -user snaptools
snapTools <- "/Users/jeffreygranja/Library/Python/2.7/bin/snaptools"
#Fragment Files
fragFiles <- c(
"atac_pbmc_5k_nextgem_fragments.tsv.gz",
"atac_pbmc_10k_nextgem_fragments.tsv.gz"
)
#Input Genome
genome <- "hg19"
if(!file.exists(paste0(genome,".chrom.sizes"))){
system(paste0("wget http://hgdownload.cse.ucsc.edu/goldenpath/",genome,"/bigZips/",genome,".chrom.sizes"))
}
#Download/Set Up 10x Fragment Files
#5k
if(!file.exists("atac_pbmc_5k_nextgem_fragments.tsv.gz")){
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_5k_nextgem/atac_pbmc_5k_nextgem_fragments.tsv.gz")
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_5k_nextgem/atac_pbmc_5k_nextgem_fragments.tsv.gz.tbi")
}
#10k
if(!file.exists("atac_pbmc_10k_nextgem_fragments.tsv.gz")){
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_10k_nextgem/atac_pbmc_10k_nextgem_fragments.tsv.gz")
system("wget http://cf.10xgenomics.com/samples/cell-atac/1.2.0/atac_pbmc_10k_nextgem/atac_pbmc_10k_nextgem_fragments.tsv.gz.tbi")
}
#Analysis of 10x Fragment Files
#Install pip install -user snaptools
snapTools <- "/Users/jeffreygranja/Library/Python/2.7/bin/snaptools"
#Fragment Files
fragFiles <- c(
"atac_pbmc_5k_nextgem_fragments.tsv.gz",
"atac_pbmc_10k_nextgem_fragments.tsv.gz"
)
#Input Genome
genome <- "hg19"
if(!file.exists(paste0(genome,".chrom.sizes"))){
system(paste0("wget http://hgdownload.cse.ucsc.edu/goldenpath/",genome,"/bigZips/",genome,".chrom.sizes"))
}
setwd("~/Documents/GitHub/ArchR")
pkgdown::build_site()
warnings()
pkgdown::build_site()
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
.callSummitsMACS2
ArchR:::.callSummitsMACS2
ArchR:::.writeCoverageToBed
.callSummitsMACS2
ArchR:::.callSummitsMACS2()
ArchR:::.callSummitsMACS2
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
.validInput
ArchR::.validInput
ArchR::addArchRAnnotations:::.validInput
ArchR:::.validInput
plot(p[[1]])
ArchR:::.getAssay
m3addon::get_assay
library(ArchR)
library(ArchR)
library(ArchR)
roxygen2::roxygenize(".")
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
library(ArchR)
#devtools::install_github('scfurl/m3addon')
graphics.off()
rm(list=ls())
knitr::opts_chunk$set(fig.width=8, fig.height=6,
echo=FALSE, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(dev.args=list(bg="transparent"))
ROOT_DIR<-.ROOT_DIR
stem<-"BMME/KSTd145"
DATA_DIR <- file.path(ROOT_DIR, "Analysis", stem, "data")      # SPECIFY HERE
RES_DIR  <- file.path(ROOT_DIR, "Analysis", stem, "res")     # SPECIFY HERE
RMD_DIR  <- file.path(ROOT_DIR, "Analysis", stem, "rmd")     # SPECIFY HERE
CDS_DIR <- file.path(ROOT_DIR, "Analysis", stem, "cds")
FIG_DIR <- file.path(ROOT_DIR, "Analysis", stem, "figs")
ENR_DIR<-file.path(ROOT_DIR, "Bioinformatics Resources", "MSigDB")
SCRIPT_DIR<-file.path(ROOT_DIR, "develop", "SfScripts", "m3")
suppressPackageStartupMessages({
library(monocle3)
library(m3addon)
library(reticulate)
library(openxlsx)
library(dplyr)
library(Matrix)
library(ggplot2)
library(rhdf5)
library(xfun)
library(pals)
library(RColorBrewer)
#library(knitr)
})
py_config()
xfun::pkg_load2(c('base64enc', 'htmltools', 'mime'))
py_available("Scrublet")
#load_all(file.path(ROOT_DIR, "fstree"))
# Set global ggplot2 properties for making print-scaled PDF panels
SFtheme<-theme_bw(base_size=14) +
theme(panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.background = element_rect(fill = "transparent"),
legend.box.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent",colour = NA))
theme_set(SFtheme)
exp_colors<-c("grey85", "orange", "red", "violetred4", "black")
qthresh<-0.05
ethresh<-1.2
cell_min<-5
cdsT <- readRDS(file.path(RES_DIR, "200428_cds_filtered_Starsolo.RDS"))
plot_cells(cdsT, color_cells_by = "cluster", label_cell_groups = F, cell_size = 0.6)+SFtheme
genes=c("HA1_TCR_HA1_gene","CD14",  "CD33", "CD34", "KIT",  "IL3RA")
plot_genes_violin(cdsT[fData(cds)$gene_short_name %in% genes,])
plot_genes_violin(cdsT[fData(cdsT)$gene_short_name %in% genes,])
cdsT$DE<-clusters(cdsT)
plot_cells(cdsT, color_cells_by = "cluster", label_cell_groups = F, cell_size = 0.6)+SFtheme
plot_cells(cds, gene="CD14",  label_cell_groups = F, cell_size = 0.6)+SFtheme
plot_cells(cdsT, gene="CD14",  label_cell_groups = F, cell_size = 0.6)+SFtheme
plot_cells(cdsT, color_cells_by = "cluster", label_cell_groups = F, cell_size = 0.6)+SFtheme
cdsT$DE[cdsT$DE=="3"]<-"Monos"
cdsT$DE<-as.character(clusters(cdsT))
cdsT$DE[cdsT$DE=="3"]<-"Monos"
cdsT$DE[cdsT$DE=="1"]<-"Leukemia"
cds<-cdsT[,cdsT$DE %in% c("Monos", "Leukemia")]
plot_cells(cds, gene="CD14",  label_cell_groups = F, cell_size = 0.6)+SFtheme
genes=c("HA1_TCR_HA1_gene","CD14",  "CD33", "CD34", "KIT",  "IL3RA")
plot_genes_violin(cds[fData(cds)$gene_short_name %in% genes,], color_by = "DE")
plot_genes_violin(cds[fData(cds)$gene_short_name %in% genes,], color_by = "DE", grouping = "DE")
plot_genes_violin(cds[fData(cds)$gene_short_name %in% genes,], color_by = "DE", grouping = "DE", ncol = 2)
fit_models(cds, model_formula_str = "~DE")
fit_models(cds[fData(cds)$gene_short_name %in% genes,], model_formula_str = "~DE")
mods<-fit_models(cds[fData(cds)$gene_short_name %in% genes,], model_formula_str = "~DE")
fit_coefs <- coefficient_table(mods)
fit_coefs <- coefficient_table(mods)
fit_coefs
terms<- fit_coefs %>% filter(term != "(Intercept)")
terms
terms<- fit_coefs %>% filter(term != "(Intercept)") %>%
select(gene_short_name, term, q_value, estimate)
terms
terms<- fit_coefs %>% filter(term != "(Intercept)") %>%
select(gene_short_name, term, q_value, normalized_effect)
terms
cds$DE
cdsT$DE<-factor(cdsT$DE)
plot_cells(cds, gene="CD14",  label_cell_groups = F, cell_size = 0.6)+SFtheme
plot_genes_violin(cds[fData(cds)$gene_short_name %in% genes,], color_by = "DE", grouping = "DE", ncol = 2)
cds$DE
cds<-cdsT[,cdsT$DE %in% c("Monos", "Leukemia")]
cds$DE<-factor(cds$DE)
plot_cells(cds, gene="CD14",  label_cell_groups = F, cell_size = 0.6)+SFtheme
mods<-fit_models(cds[fData(cds)$gene_short_name %in% genes,], model_formula_str = "~DE")
fit_coefs <- coefficient_table(mods)
terms<- fit_coefs %>% filter(term != "(Intercept)") %>%
select(gene_short_name, term, q_value, normalized_effect)
knitr::kable(terms)
cds$DE
levels(cds$DE)
cds$DE<-as.character(cds$DE)
cds$DE<-factor(cds$DE, levels=c("Monos", "Leukemia"))
plot_genes_violin(cds[fData(cds)$gene_short_name %in% genes,], color_by = "DE", grouping = "DE", ncol = 2)
mods<-fit_models(cds[fData(cds)$gene_short_name %in% genes,], model_formula_str = "~DE")
fit_coefs <- coefficient_table(mods)
terms<- fit_coefs %>% filter(term != "(Intercept)") %>%
select(gene_short_name, term, q_value, normalized_effect)
knitr::kable(terms)
.initializeMat
library(ArchR)
roxygen2::roxygenize(".")
library(ArchR)
library(ArchR)
library(ArchR)
ArchR:::.getMatrixFromArrow
library(ArchR)
roxygen2::roxygenize(".")
library(ArchR)
roxygen2::roxygenize(".")
roxygen2::roxygenize(".")
library(ArchR)
roxygen2::roxygenize(".")
library(ArchR)
exportMonocle3 <- function(
ArchRProj = NULL,
useMatrix = NULL,
threads = getArchRThreads(),
verbose = TRUE,
binarize = T,
logFile = createLogFile("exportMonocle3")
){
require(SingleCellExperiment)
.validInput(input = ArchRProj, name = "ArchRProj", valid = c("ArchRProj"))
.validInput(input = useMatrix, name = "useMatrix", valid = c("character"))
.validInput(input = threads, name = "threads", valid = c("integer"))
.validInput(input = verbose, name = "verbose", valid = c("boolean"))
.validInput(input = logFile, name = "logFile", valid = c("character"))
.startLogging(logFile = logFile)
.logThis(mget(names(formals()),sys.frame(sys.nframe())), "exportMonocle3 Input-Parameters", logFile = logFile)
ArrowFiles <- getArrowFiles(ArchRProj)
ArrowFiles <- ArchR:::.validArrow(ArrowFiles)
featureDF <- .getFeatureDF(ArrowFiles, subGroup = useMatrix)
Groups <- getCellColData(ArchRProj = ArchRProj)
Cells <- ArchRProj$cellNames
if(is.null(featureDF$end)){
starts<-featureDF[as.character(featureDF$seqnames) %in% as.character(featureDF$seqnames)[1],]$start
width<-getmode(starts[-1]-starts[-length(starts)])
ranges<-GRanges(seqnames = featureDF$seqnames, ranges = IRanges(start = featureDF$start, width = width), names=featureDF$idx)
}else{
ranges<-GRanges(seqnames = featureDF$seqnames, ranges = IRanges(start = featureDF$start, end = featureDF$end), names=featureDF$idx)
}
.logMessage("Getting Group Matrix", logFile=logFile)
mat <- tryCatch({
getMatrixFromArrow(ArrowFiles, useMatrix = useMatrix, binarize = binarize, cellNames = Cells, useSeqnames = as.character(seqnames(ranges)))
}, error = function(e){
errorList <- list(
ArrowFiles = ArrowFiles,
featureDF = featureDF,
useMatrix = useMatrix,
threads = threads,
verbose = verbose
)
.logError(e, fn = ".getMatrixFromArrow", info = "", errorList = errorList, logFile = logFile)
})
o <- h5read(file = ArrowFiles, name = paste0("/", useMatrix,"/Info/Params"))
h5closeAll()
window_size<-getmode(o$tileSize)
mat@assays@data$counts<-mat@assays@data[[useMatrix]]
mat@assays@data[[useMatrix]]<-NULL
rs<-ArchR:::.getRowSums(ArrowFiles = ArrowFiles, useMatrix = useMatrix)
rowRanges(mat)<-ranges
mat<-mat[, match(rownames(ArchRProj@reducedDims$IterativeLSI$matSVD), colnames(mat))]
cds<-new_cell_data_set(expression_data = mat@assays@data$counts, cell_metadata = colData(mat))
rowRanges(cds)<-rowRanges(mat)
cds<-cds[,rownames(ArchRProj@reducedDims$IterativeLSI$matSVD)]
reducedDims(cds)<-SimpleList(LSI=ArchRProj@reducedDims$IterativeLSI$matSVD,
UMAP=ArchRProj@embeddings$UMAP$df)
irlba_rotation = ArchRProj@reducedDims$IterativeLSI$svd$u
row.names(irlba_rotation) = paste0(ArchRProj@reducedDims$IterativeLSI$LSIFeatures$seqnames, "_", ArchRProj@reducedDims$IterativeLSI$LSIFeatures$idx)
iLSI<-SimpleList(svd=ArchRProj@reducedDims$IterativeLSI$svd,
features=ArchRProj@reducedDims$IterativeLSI$LSIFeatures,
row_sums = ArchRProj@reducedDims$IterativeLSI$rowSm,
seed=ArchRProj@reducedDims$IterativeLSI$seed,
binarize=ArchRProj@reducedDims$IterativeLSI$binarize,
scale_to=ArchRProj@reducedDims$IterativeLSI$scaleTo,
num_dim=ArchRProj@reducedDims$IterativeLSI$nDimensions,
resolution=NULL,
granges=ArchRProj@reducedDims$IterativeLSI$LSIFeatures,
LSI_method=ArchRProj@reducedDims$IterativeLSI$LSIMethod, outliers=NULL)
pp_aux <- SimpleList(iLSI=iLSI, gene_loadings=irlba_rotation)
cds@preprocess_aux <- pp_aux
if(is.null(cds@preprocess_aux$iLSI$granges$end)){
starts<-cds@preprocess_aux$iLSI$granges[cds@preprocess_aux$iLSI$granges$seqnames %in% cds@preprocess_aux$iLSI$granges$seqnames[1],]$start
width<-getmode(starts[-1]-starts[-length(starts)])
ranges<-GRanges(seqnames = cds@preprocess_aux$iLSI$granges$seqnames, ranges = IRanges(start = cds@preprocess_aux$iLSI$granges$start, width = width), names=cds@preprocess_aux$iLSI$granges$idx)
}else{
ranges<-GRanges(seqnames = cds@preprocess_aux$iLSI$granges$seqnames, ranges = IRanges(start = cds@preprocess_aux$iLSI$granges$start, end = cds@preprocess_aux$iLSI$granges$end), names=cds@preprocess_aux$iLSI$granges$idx)
}
cds@preprocess_aux$iLSI$granges<-ranges
cds@clusters[["UMAP"]]$clusters[colnames(exprs(cds))]<-as.character(ArchRProj@cellColData[colnames(exprs(cds)),]$Clusters)
cds@reduce_dim_aux<-SimpleList(UMAP=SimpleList(scale_info=NULL, model_file=ArchRProj@embeddings$UMAP$params$uwotModel, num_dim=cds@preprocess_aux$iLSI$num_dim))
cds
}
ArchR:::.validInput
install.packages(c("Cairo", "tibble"))
ArchR:::.tabixToTmp
library(ArchR)
library(ArchR)
library(ArchR)
ArchR:::.projectLSI
library(ArchR)
roxygen2::roxygenise()
rm(list = c("exportMonocle3"))
roxygen2::roxygenise()
library(ArchR)
m3addon::cut2
m3addon:::cut2
library(ArchR)
