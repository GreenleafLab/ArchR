// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rowCorCpp
Rcpp::NumericVector rowCorCpp(IntegerVector idxX, IntegerVector idxY, Rcpp::NumericMatrix X, Rcpp::NumericMatrix Y);
RcppExport SEXP _ArchR_rowCorCpp(SEXP idxXSEXP, SEXP idxYSEXP, SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type idxX(idxXSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idxY(idxYSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rowCorCpp(idxX, idxY, X, Y));
    return rcpp_result_gen;
END_RCPP
}
// rleSumsStrandedChr
IntegerVector rleSumsStrandedChr(S4 rle, IntegerVector x, IntegerVector strand, int width);
RcppExport SEXP _ArchR_rleSumsStrandedChr(SEXP rleSEXP, SEXP xSEXP, SEXP strandSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type rle(rleSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type strand(strandSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(rleSumsStrandedChr(rle, x, strand, width));
    return rcpp_result_gen;
END_RCPP
}
// rleSumsStranded
IntegerVector rleSumsStranded(List rleList, List grList, int width, Function as_integer);
RcppExport SEXP _ArchR_rleSumsStranded(SEXP rleListSEXP, SEXP grListSEXP, SEXP widthSEXP, SEXP as_integerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type rleList(rleListSEXP);
    Rcpp::traits::input_parameter< List >::type grList(grListSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< Function >::type as_integer(as_integerSEXP);
    rcpp_result_gen = Rcpp::wrap(rleSumsStranded(rleList, grList, width, as_integer));
    return rcpp_result_gen;
END_RCPP
}
// tabulate2dCpp
IntegerMatrix tabulate2dCpp(IntegerVector& x, int& xmin, int& xmax, IntegerVector& y, int& ymin, int& ymax);
RcppExport SEXP _ArchR_tabulate2dCpp(SEXP xSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP ySEXP, SEXP yminSEXP, SEXP ymaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int& >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< int& >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int& >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< int& >::type ymax(ymaxSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulate2dCpp(x, xmin, xmax, y, ymin, ymax));
    return rcpp_result_gen;
END_RCPP
}
// computeSparseRowVariances
Rcpp::NumericVector computeSparseRowVariances(IntegerVector j, NumericVector val, NumericVector rm, int n);
RcppExport SEXP _ArchR_computeSparseRowVariances(SEXP jSEXP, SEXP valSEXP, SEXP rmSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rm(rmSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSparseRowVariances(j, val, rm, n));
    return rcpp_result_gen;
END_RCPP
}
// determineOverlapCpp
Rcpp::IntegerVector determineOverlapCpp(IntegerMatrix m, int overlapCut);
RcppExport SEXP _ArchR_determineOverlapCpp(SEXP mSEXP, SEXP overlapCutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type overlapCut(overlapCutSEXP);
    rcpp_result_gen = Rcpp::wrap(determineOverlapCpp(m, overlapCut));
    return rcpp_result_gen;
END_RCPP
}
// kmerIdxCpp
IntegerVector kmerIdxCpp(const std::string& str, const int window, const int n, CharacterVector& kmer);
RcppExport SEXP _ArchR_kmerIdxCpp(SEXP strSEXP, SEXP windowSEXP, SEXP nSEXP, SEXP kmerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type str(strSEXP);
    Rcpp::traits::input_parameter< const int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type kmer(kmerSEXP);
    rcpp_result_gen = Rcpp::wrap(kmerIdxCpp(str, window, n, kmer));
    return rcpp_result_gen;
END_RCPP
}
// kmerPositionFrequencyCpp
IntegerMatrix kmerPositionFrequencyCpp(StringVector& string_vector, IntegerVector& strand_vector, const int window, const int w, CharacterVector& kmer);
RcppExport SEXP _ArchR_kmerPositionFrequencyCpp(SEXP string_vectorSEXP, SEXP strand_vectorSEXP, SEXP windowSEXP, SEXP wSEXP, SEXP kmerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type string_vector(string_vectorSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type strand_vector(strand_vectorSEXP);
    Rcpp::traits::input_parameter< const int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< const int >::type w(wSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type kmer(kmerSEXP);
    rcpp_result_gen = Rcpp::wrap(kmerPositionFrequencyCpp(string_vector, strand_vector, window, w, kmer));
    return rcpp_result_gen;
END_RCPP
}
// kmerIDFrequencyCpp
IntegerMatrix kmerIDFrequencyCpp(StringVector& string_vector, IntegerVector& id_vector, const int n_id, const int window, const int w, CharacterVector& kmer);
RcppExport SEXP _ArchR_kmerIDFrequencyCpp(SEXP string_vectorSEXP, SEXP id_vectorSEXP, SEXP n_idSEXP, SEXP windowSEXP, SEXP wSEXP, SEXP kmerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type string_vector(string_vectorSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type id_vector(id_vectorSEXP);
    Rcpp::traits::input_parameter< const int >::type n_id(n_idSEXP);
    Rcpp::traits::input_parameter< const int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< const int >::type w(wSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type kmer(kmerSEXP);
    rcpp_result_gen = Rcpp::wrap(kmerIDFrequencyCpp(string_vector, id_vector, n_id, window, w, kmer));
    return rcpp_result_gen;
END_RCPP
}
// find_non_zero_indices
arma::uvec find_non_zero_indices(arma::sp_mat& X, int col);
RcppExport SEXP _ArchR_find_non_zero_indices(SEXP XSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(find_non_zero_indices(X, col));
    return rcpp_result_gen;
END_RCPP
}
// deviations_cpp
Rcpp::List deviations_cpp(const arma::sp_mat& X, const arma::umat& B, arma::sp_mat& anno_mat, const arma::mat& expect, const arma::mat& CpS, const bool verbose, const std::string& prefix, const int print_every);
RcppExport SEXP _ArchR_deviations_cpp(SEXP XSEXP, SEXP BSEXP, SEXP anno_matSEXP, SEXP expectSEXP, SEXP CpSSEXP, SEXP verboseSEXP, SEXP prefixSEXP, SEXP print_everySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type anno_mat(anno_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type expect(expectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type CpS(CpSSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type prefix(prefixSEXP);
    Rcpp::traits::input_parameter< const int >::type print_every(print_everySEXP);
    rcpp_result_gen = Rcpp::wrap(deviations_cpp(X, B, anno_mat, expect, CpS, verbose, prefix, print_every));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ArchR_rowCorCpp", (DL_FUNC) &_ArchR_rowCorCpp, 4},
    {"_ArchR_rleSumsStrandedChr", (DL_FUNC) &_ArchR_rleSumsStrandedChr, 4},
    {"_ArchR_rleSumsStranded", (DL_FUNC) &_ArchR_rleSumsStranded, 4},
    {"_ArchR_tabulate2dCpp", (DL_FUNC) &_ArchR_tabulate2dCpp, 6},
    {"_ArchR_computeSparseRowVariances", (DL_FUNC) &_ArchR_computeSparseRowVariances, 4},
    {"_ArchR_determineOverlapCpp", (DL_FUNC) &_ArchR_determineOverlapCpp, 2},
    {"_ArchR_kmerIdxCpp", (DL_FUNC) &_ArchR_kmerIdxCpp, 4},
    {"_ArchR_kmerPositionFrequencyCpp", (DL_FUNC) &_ArchR_kmerPositionFrequencyCpp, 5},
    {"_ArchR_kmerIDFrequencyCpp", (DL_FUNC) &_ArchR_kmerIDFrequencyCpp, 6},
    {"_ArchR_find_non_zero_indices", (DL_FUNC) &_ArchR_find_non_zero_indices, 2},
    {"_ArchR_deviations_cpp", (DL_FUNC) &_ArchR_deviations_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_ArchR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
